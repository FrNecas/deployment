# Copyright Contributors to the Packit project.
# SPDX-License-Identifier: MIT

---
# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ name }}
  annotations:
    # Setting triggers to StatefulSet is tricky (they also don't appear in GUI).
    # I run the following and then checked how the resulting yaml looks like.
    # oc set triggers statefulset.apps/packit-worker --from-image=packit-worker:dev -c packit-worker
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"packit-worker:{{ deployment }}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"packit-worker\")].image"}]
spec:
  selector:
    matchLabels:
      # has to match .spec.template.metadata.labels
      name: {{ name }}
      app: packit
  serviceName: "{{ name }}"
  replicas: {{ worker_replicas }}
  volumeClaimTemplates:
{% if with_repository_cache and 'long-running' in queues %}
    - metadata:
        name: packit-worker-repository-cache
      spec:
        # The only option on OpenShift Online is AWS EBS provisioning
        # supporting only `ReadWriteOnce` access:
        # https://docs.openshift.com/online/pro/architecture/additional_concepts/storage.html#pv-restrictions
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ repository_cache_storage }}
{% endif %}
  updateStrategy.type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        name: {{ name }}
        app: packit
      # https://docs.openshift.com/container-platform/latest/openshift_images/using-imagestreams-with-kube-resources.html
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
    spec:
      terminationGracePeriodSeconds: 10
      volumes:
        - name: packit-ssh
          secret: {secretName: packit-ssh}
        - name: packit-secrets
          secret: {secretName: packit-secrets}
        - name: packit-config
          secret: {secretName: packit-config}
{% if with_fluentd_sidecar %}
        - name: fluentd-config
          configMap: {name: fluentd-config}
{% endif %}
      containers:
        - name: packit-worker
          image: packit-worker:{{ deployment }}
          env:
            - name: PROJECT
              value: {{ project }}
            - name: DEPLOYMENT
              value: {{ deployment }}
            - name: DISTGIT_URL
              value: {{ distgit_url }}
            - name: DISTGIT_NAMESPACE
              value: {{ distgit_namespace }}
            - name: APP
              value: {{ celery_app }}
            - name: REDIS_SERVICE_HOST
              value: redis
            - name: POSTGRESQL_USER
              valueFrom: {secretKeyRef: {name: postgres-secret, key: database-user}}
            - name: POSTGRESQL_PASSWORD
              valueFrom: {secretKeyRef: {name: postgres-secret, key: database-password}}
            - name: POSTGRESQL_HOST
              valueFrom: {secretKeyRef: {name: postgres-secret, key: database-host}}
            - name: POSTGRESQL_DATABASE
              valueFrom: {secretKeyRef: {name: postgres-secret, key: database-name}}
            - name: SENTRY_SECRET
              valueFrom: {secretKeyRef: {name: sentry, key: dsn}}
            - name: CELERY_RETRY_LIMIT
              value: "{{ celery_retry_limit }}"
            - name: CELERY_RETRY_BACKOFF
              value: "{{ celery_retry_backoff }}"
            - name: QUEUES
              value: "{{ queues }}"
            - name: PUSHGATEWAY_ADDRESS
              value: "{{ pushgateway_address }}"
            - name: AWS_ACCESS_KEY_ID
              valueFrom: {secretKeyRef: {name: aws, key: access-key-id}}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom: {secretKeyRef: {name: aws, key: secret-access-key}}
{% if queues == 'short-running' %}
            - name: CONCURRENCY
              value: "16"
{% endif %}
            - name: SYSLOG_HOST
              # localhost doesn't work
              value: "127.0.0.1"
          volumeMounts:
            - name: packit-ssh
              mountPath: /packit-ssh
              readOnly: true
            - name: packit-secrets
              mountPath: /secrets
              readOnly: true
            - name: packit-config
              mountPath: /home/packit/.config
              readOnly: true
{% if with_repository_cache and 'long-running' in queues %}
            - name: packit-worker-repository-cache
              mountPath: /repository-cache
{% endif %}
          command:
            - "/usr/bin/run_worker.sh"
          resources:
            requests:
              memory: {{ worker_requests_memory }}
              cpu: {{ worker_requests_cpu }}
            limits:
              memory: {{ worker_limits_memory }}
              cpu: {{ worker_limits_cpu }}
{% if with_fluentd_sidecar %}
        # See ../docs/logs.md
        - name: fluentd-sidecar
          image: fluentd:{{ deployment }}
          ports:
            - containerPort: 5140
              protocol: UDP
          env:
            - name: SPLUNK_HEC_HOST
              valueFrom: {secretKeyRef: {name: splunk, key: hec-host}}
            - name: SPLUNK_HEC_PORT
              valueFrom: {secretKeyRef: {name: splunk, key: hec-port}}
            - name: SPLUNK_HEC_TOKEN
              valueFrom: {secretKeyRef: {name: splunk, key: hec-token}}
          volumeMounts:
            - name: fluentd-config
              mountPath: /fluentd/etc
              readOnly: true
          resources:
            requests: {memory: "128Mi", cpu: "10m"}
            limits: {memory: "128Mi", cpu: "100m"}
{% endif %}
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: packit-worker
spec:
  tags:
    - name: {{ deployment }}
      from:
        kind: DockerImage
        name: {{ image_worker }}
      importPolicy:
        # Periodically query registry to synchronize tag and image metadata.
        scheduled: {{ auto_import_images }}
  lookupPolicy:
    # allows all resources pointing to this image stream to use it in the image field
    local: true
{% if with_fluentd_sidecar %}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: fluentd-config
data:
  fluent.conf: |
    <system>
      log_level debug
    </system>
    <source>
      @type syslog
      <parse>
        message_format rfc5424
      </parse>
      tag packit
    </source>
    <match packit.**>
      @type splunk_hec
      hec_host "#{ENV['SPLUNK_HEC_HOST']}"
      hec_port "#{ENV['SPLUNK_HEC_PORT']}"
      hec_token "#{ENV['SPLUNK_HEC_TOKEN']}"
    </match>
---
kind: ImageStream
apiVersion: v1
metadata:
  name: fluentd
spec:
  tags:
    - name: {{ deployment }}
      from:
        kind: DockerImage
        name: {{ image_fluentd }}
      importPolicy:
        # Periodically query registry to synchronize tag and image metadata.
        scheduled: {{ auto_import_images }}
  lookupPolicy:
    # allows all resources pointing to this image stream to use it in the image field
    local: true
{% endif %}
