# MIT License
#
# Copyright (c) 2018-2019 Red Hat, Inc.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

---
- name: packit-service deployment
  hosts: all
  vars:
    deployment: "{{ lookup('env', 'DEPLOYMENT') }}"
    sandbox_namespace: "packit-{{ deployment }}-sandbox"
    without_fedmsg: false
    without_redis_commander: false
    without_flower: false
    # feel free to override this in vars
    deployment_image: "{{ deployment }}"
    image: ""
    image_digest: ""
    image_worker: ""
    image_worker_digest: ""
  tasks:
    - name: include variables
      include_vars: ../vars/{{ deployment }}.yml

    - block:
      - name: get kubeconfig token
        command: oc whoami -t
        register: kubeconfig_token
      - name: check if tokens match
        assert:
          that:
          - kubeconfig_token.stdout == api_key
          msg: "OpenShift API token defined in vars/ does not match token from your current environment."
      ignore_errors: yes

    - name: Deploy templates (need to be processed)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}"
      loop:
        - "{{ lookup('template', '../openshift/secret-packit-ssh.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-packit-secrets.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-packit-config.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-sentry.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/cmap-packit-httpd-conf.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/route.packit.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/sandbox-namespace.yml.j2') | from_yaml }}"

    - block:
      - name: Get metadata about d.io/u-c/packit-service:{{ deployment_image }}
        shell: skopeo inspect docker://docker.io/usercont/packit-service:{{ deployment_image }}
        register: image_metadata
      - name: set image_digest
        set_fact:
          image_digest: "{{ image_metadata.stdout | from_json | json_query('Digest') }}"
      when: 'image_digest == "" and image == ""'

    - block:
      - name: image_digest has to be set
        assert:
          that:
          - 'image_digest != ""'
          fail_msg: 'Variable image_digest is not set when it should be.'
      - name: set image var
        set_fact:
          image: "docker.io/usercont/packit-service@{{ image_digest }}"
      when: 'image == ""'

    - block:
      - name: Get metadata about d.io/u-c/packit-service-worker:{{ deployment_image }}
        shell: skopeo inspect docker://docker.io/usercont/packit-service-worker:{{ deployment_image }}
        register: image_worker_metadata
      - name: set image_worker_digest
        set_fact:
          image_worker_digest: "{{ image_worker_metadata.stdout | from_json | json_query('Digest') }}"
      when: 'image_worker_digest == "" and image_worker == ""'

    - block:
      - name: image_worker_digest has to be set
        assert:
          that:
          - 'image_worker_digest != ""'
          fail_msg: 'Variable image_worker_digest is not set when it should be.'
      - name: set image_worker var
        set_fact:
          image_worker: "docker.io/usercont/packit-service-worker@{{ image_worker_digest }}"
      when: 'image_worker == ""'

    - name: Deploy resource config - deployment (need to be processed)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}"
      loop:
        - "{{ lookup('template', '../openshift/deployment.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/deployment-worker.yml.j2') | from_yaml }}"

    - name: Deploy resource configs (no need to process them)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        src: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}"
      loop:
        - ../openshift/redis.yml
        - ../openshift/service.yml

    - name: Deploy redis-commander
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/redis-commander.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}"
      when: not without_redis_commander

    - name: Deploy flower
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/flower.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}"
      when: not without_flower

    - name: Deploy fedmsg listener
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/deployment-fedmsg.yml.j2') | from_yaml }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}"
      when: not without_fedmsg

    - name: Set up the sandbox namespace
      command: oc adm -n {{ sandbox_namespace }} policy add-role-to-user edit system:serviceaccount:{{ project }}:default
